name: CI/CD con SonarCloud y Deploy a GitHub Pages

on:
  push:
    branches:
      - master  # Cambios en master disparan el flujo

jobs:
  build_and_analyze:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout del repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Necesario para SonarCloud

    # Verificar parÃ¡metros de SonarCloud (OPCIONAL, pero Ãºtil para depuraciÃ³n)
    - name: Verificar parÃ¡metros de SonarCloud
      run: |
        echo "SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}"
        echo "SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}"
        if [ -z "${{ secrets.SONAR_PROJECT_KEY }}" ]; then
          echo "ðŸš¨ SONAR_PROJECT_KEY no estÃ¡ configurado correctamente"
          exit 1
        else
          echo "âœ… SONAR_PROJECT_KEY estÃ¡ configurado correctamente"
        fi
        if [ -z "${{ secrets.SONAR_ORGANIZATION }}" ]; then
          echo "ðŸš¨ SONAR_ORGANIZATION no estÃ¡ configurado correctamente"
          exit 1
        else
          echo "âœ… SONAR_ORGANIZATION estÃ¡ configurado correctamente"
        fi

    # SonarCloud Scan
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@v2.3 # Usando la versiÃ³n mÃ¡s reciente
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        #  args: > # No es necesario usar 'args' de esta manera para las propiedades principales
        #    -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
        #    -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
        projectKey: ${{ secrets.SONAR_PROJECT_KEY }}  # Usando la forma recomendada
        organization: ${{ secrets.SONAR_ORGANIZATION }} # Usando la forma recomendada


  deploy:
    needs: build_and_analyze  # Espera a que el anÃ¡lisis de SonarCloud termine
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repo
        uses: actions/checkout@v3

      - name: Configurar Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Actions"

      - name: Crear carpeta temporal gh-pages
        run: mkdir gh-pages

      - name: Copiar archivos a gh-pages
        run: cp index.html styles.css gh-pages/

      - name: Inicializar Git y preparar rama gh-pages
        run: |
          cd gh-pages
          git init
          git checkout -b gh-pages
          git add .
          git commit -m "Deploy automÃ¡tico - ${{ github.sha }}"

      # ðŸ‘‡ Verifica que el GH_TOKEN estÃ¡ presente
      - name: Verificar que el GH_TOKEN estÃ¡ presente
        run: |
          if [ -z "${{ secrets.GH_TOKEN }}" ]; then
            echo "ðŸš¨ GH_TOKEN estÃ¡ mal definido"
            exit 1
          else
            echo "âœ… GH_TOKEN estÃ¡ correctamente !!"
          fi

      - name: Push a gh-pages
        run: |
          cd gh-pages
          git remote add origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}
          git push -f origin gh-pages
